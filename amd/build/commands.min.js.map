{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["import {get_string as getString} from 'core/str';\nimport {component} from './common';\nimport {getCorrTypes} from \"./options\";\n\n/**\n * Add a correction on the current selection.\n * @param {editor} editor\n * @returns {void}\n */\nfunction addCorrection(editor) {\n    let correction_types = getCorrTypes(editor);\n\n    let correction_types_array = correction_types.split('\\n').map((line) => {\n        let [value, text] = line.split('=');\n        return {text: text, value: value};\n    });\n\n    editor.windowManager.open({\n        title: 'Add a correction',\n        body: {\n            type: 'panel',\n            items: [\n                {\n                    type: 'selectbox',\n                    name: 'correction_type',\n                    label: 'Correction type',\n                    items: correction_types_array\n                },\n                {\n                    type: 'textarea',\n                    name: 'correction_comment',\n                    label: 'Comment'\n                }\n            ]\n        },\n        buttons: [\n            {\n                type: 'submit',\n                text: 'OK'\n            }\n        ],\n        initialData: {\n            correction_type: 'none',\n            correction_comment: '',\n        },\n        onSubmit: (api) => {\n            const data = api.getData();\n            const correction_type = data.correction_type;\n            const correction_comment = data.correction_comment;\n\n            let whole_content = editor.getContent({format: 'html'});\n            let current_selection = editor.selection.getContent({});\n            let updated_selection =\n                `<span class=\"tiny_ubicast\">\n                    ${current_selection}\n                    <span class=\"tiny_ubicast_correction\">\n                        <sup title=\"${current_selection}\">${correction_type}</sup>\n                        <span class=\"tiny_ubicast_comment\">${correction_comment}</span>\n                    </span>\n                </span>`;\n            let updated_content = whole_content.replace(current_selection, updated_selection);\n            editor.setContent(updated_content);\n            api.close();\n        }\n    });\n}\n\n/**\n * Remove the correction on the current selection or cursor position\n * @param {editor} editor\n */\nfunction removeCorrection(editor) {\n    let selection = editor.selection.getNode();\n    if (selection.classList.contains('tiny_ubicast')) {\n        selection.querySelector('.tiny_ubicast_correction').remove();\n        selection.attributes.removeNamedItem('class');\n    }\n\n}\n\nexport const getSetup = async () => {\n    const [\n        addCorrectionButtonTitle,\n        removeCorrectionButtonTitle\n    ] = await Promise.all([\n        getString('button_addcorrection', component),\n        getString('button_removecorrection', component),\n    ]);\n\n    return (editor) => {\n\n        // Register the add correction Toolbar Button.\n        editor.ui.registry.addButton(addCorrectionButtonTitle, {\n            icon: 'comment-add',\n            tooltip: \"Add correction\",\n            onAction: () => addCorrection(editor)\n        });\n\n        editor.ui.registry.addButton(removeCorrectionButtonTitle, {\n            icon: 'comment',\n            tooltip: \"Remove correction\",\n            onAction: () => removeCorrection(editor)\n        });\n    };\n};"],"names":["async","addCorrectionButtonTitle","removeCorrectionButtonTitle","Promise","all","component","editor","ui","registry","addButton","icon","tooltip","onAction","correction_types_array","split","map","line","value","text","windowManager","open","title","body","type","items","name","label","buttons","initialData","correction_type","correction_comment","onSubmit","api","data","getData","whole_content","getContent","format","current_selection","selection","updated_selection","updated_content","replace","setContent","close","addCorrection","getNode","classList","contains","querySelector","remove","attributes","removeNamedItem","removeCorrection"],"mappings":"0NAgFwBA,gBAEhBC,yBACAC,mCACMC,QAAQC,IAAI,EAClB,mBAAU,uBAAwBC,oBAClC,mBAAU,0BAA2BA,4BAGjCC,SAGJA,OAAOC,GAAGC,SAASC,UAAUR,yBAA0B,CACnDS,KAAM,cACNC,QAAS,iBACTC,SAAU,aAtFCN,YAGfO,wBAFmB,yBAAaP,QAEUQ,MAAM,MAAMC,KAAKC,WACtDC,MAAOC,MAAQF,KAAKF,MAAM,WACxB,CAACI,KAAMA,KAAMD,MAAOA,UAG/BX,OAAOa,cAAcC,KAAK,CACtBC,MAAO,mBACPC,KAAM,CACFC,KAAM,QACNC,MAAO,CACH,CACID,KAAM,YACNE,KAAM,kBACNC,MAAO,kBACPF,MAAOX,wBAEX,CACIU,KAAM,WACNE,KAAM,qBACNC,MAAO,aAInBC,QAAS,CACL,CACIJ,KAAM,SACNL,KAAM,OAGdU,YAAa,CACTC,gBAAiB,OACjBC,mBAAoB,IAExBC,SAAWC,YACDC,KAAOD,IAAIE,UACXL,gBAAkBI,KAAKJ,gBACvBC,mBAAqBG,KAAKH,uBAE5BK,cAAgB7B,OAAO8B,WAAW,CAACC,OAAQ,SAC3CC,kBAAoBhC,OAAOiC,UAAUH,WAAW,IAChDI,6EAEMF,+HAEgBA,+BAAsBT,8FACCC,oFAG7CW,gBAAkBN,cAAcO,QAAQJ,kBAAmBE,mBAC/DlC,OAAOqC,WAAWF,iBAClBT,IAAIY,WAiCYC,CAAcvC,UAGlCA,OAAOC,GAAGC,SAASC,UAAUP,4BAA6B,CACtDQ,KAAM,UACNC,QAAS,oBACTC,SAAU,aA9BIN,YAClBiC,UAAYjC,OAAOiC,UAAUO,UAC7BP,UAAUQ,UAAUC,SAAS,kBAC7BT,UAAUU,cAAc,4BAA4BC,SACpDX,UAAUY,WAAWC,gBAAgB,UA0BjBC,CAAiB/C"}